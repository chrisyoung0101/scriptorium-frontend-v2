--- App.vue (/Users/chrisyoung/scriptorium-frontend-v2/src/App.vue) ---
<template>
  <div id="app">
    <h1>Scriptorium</h1>
    <DocumentForm @documentCreated="refreshDocuments" />
    <hr />
    <DocumentList ref="docList" />
  </div>
</template>

<script>
import DocumentList from './components/DocumentList.vue';
import DocumentForm from './components/DocumentForm.vue';

export default {
  name: 'App',
  components: {
    DocumentList,
    DocumentForm,
  },
  methods: {
    refreshDocuments(newDoc) {
      this.$refs.docList.fetchDocuments(); // Refresh document list
    },
  },
};
</script>


<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  padding: 20px;
}
h1 {
  text-align: center;
}
</style>


--- api.js (/Users/chrisyoung/scriptorium-frontend-v2/src/services/api.js) ---
import axios from 'axios';
import qs from 'qs'; // For serializing data into x-www-form-urlencoded format

// Create Axios instance with Netlify proxy
const api = axios.create({
  baseURL: '/api', // ✅ Uses Netlify proxy (_redirects handles this)
  headers: {
    'Content-Type': 'application/json', // Default for GET requests
  },
});

// Helper method for POST with URL-encoded data
export const postUrlEncoded = async (url, data) => {
  const serializedData = qs.stringify(data); // Convert JSON to x-www-form-urlencoded

  return api.post(url, serializedData, {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded', // Override Content-Type
    },
  });
};

export default api;


--- DocumentList.vue (/Users/chrisyoung/scriptorium-frontend-v2/src/components/DocumentList.vue) ---
<template>
    <div>
      <h1>Documents</h1>
      <ul>
        <li v-for="document in documents" :key="document.id" @click="selectDocument(document)">
          <strong>{{ document.title }}</strong> - {{ document.name }} ({{ document.type }})
        </li>
      </ul>
  
      <div v-if="selectedDocument" class="document-details">
        <h2>{{ selectedDocument.title }}</h2>
        <p><strong>Name:</strong> {{ selectedDocument.name }}</p>
        <p><strong>Type:</strong> {{ selectedDocument.type }}</p>
        <p><strong>Content:</strong></p>
        <p>{{ selectedDocument.content || 'No content available.' }}</p>
        <p v-if="selectedDocument.parentId"><strong>Parent ID:</strong> {{ selectedDocument.parentId }}</p>
        <button @click="selectedDocument = null">Back to List</button>
      </div>
    </div>
  </template>
  
  <script>
  import api from '../services/api';
  
  export default {
    name: 'DocumentList',
    data() {
      return {
        documents: [],
        selectedDocument: null,
      };
    },
    mounted() {
      this.fetchDocuments();
    },
    methods: {
      async fetchDocuments() {
        try {
          const response = await api.get('/documents');
          this.documents = response.data;
        } catch (error) {
          console.error('Error fetching documents:', error);
        }
      },
      selectDocument(document) {
        this.selectedDocument = document;
      },
    },
  };
  </script>
  
  <style scoped>
  ul {
    list-style-type: none;
    padding: 0;
  }
  li {
    cursor: pointer;
    padding: 8px;
    border-bottom: 1px solid #ccc;
  }
  li:hover {
    background-color: #f0f0f0;
  }
  .document-details {
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 10px;
  }
  </style>
  

--- DocumentForm.vue (/Users/chrisyoung/scriptorium-frontend-v2/src/components/DocumentForm.vue) ---
<template>
    <div>
      <h2>Create New Document</h2>
      <form @submit.prevent="createDocument">
        <div>
          <label>Title:</label>
          <input v-model="document.title" required />
        </div>
  
        <div>
          <label>Name (optional):</label>
          <input v-model="document.name" placeholder="Auto-generated if left empty" />
        </div>
  
        <div>
          <label>Content:</label>
          <textarea v-model="document.content" required></textarea>
        </div>
  
        <div>
          <label>Type:</label>
          <select v-model="document.type">
            <option value="FILE">File</option>
            <option value="FOLDER">Folder</option>
          </select>
        </div>
  
        <div>
          <label>Parent ID (optional):</label>
          <input v-model="document.parentId" placeholder="For nested documents" />
        </div>
  
        <button type="submit">Create Document</button>
      </form>
    </div>
  </template>
  
  <script>
  import api from '../services/api';
  
  export default {
    name: 'DocumentForm',
    data() {
      return {
        document: {
          name: '',
          title: '',
          content: '',
          type: 'FILE',  // Default type
          parentId: null // For nesting under a parent
        },
      };
    },
    methods: {
      // ✅ Helper function to URL-encode the payload
      encodePayload(obj) {
        return Object.keys(obj)
          .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]))
          .join('&');
      },
  
      async createDocument() {
        try {
          // Generate name if empty
          const generatedName = this.document.name || this.document.title.replace(/\s+/g, '_').toLowerCase();
  
          // Build payload
          const payload = {
            name: generatedName,
            title: this.document.title,
            content: this.document.content,
            type: this.document.type,
            parent: this.document.parentId ? this.document.parentId : ''
          };
  
          // ✅ POST request with URL-encoded payload
          const response = await api.post('/documents', this.encodePayload(payload), {
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'  // ✅ Simple Content-Type to bypass preflight
            }
          });
  
          alert('Document created successfully!');
  
          // Clear form
          this.resetForm();
  
          // Notify parent to refresh list
          this.$emit('documentCreated', response.data);
        } catch (error) {
          console.error('Error creating document:', error.response?.data || error);
          alert(`Failed to create document. ${error.response?.data?.message || error.message}`);
        }
      },
  
      resetForm() {
        this.document = {
          name: '',
          title: '',
          content: '',
          type: 'FILE',
          parentId: null
        };
      },
    },
  };
  </script>
  
  <style scoped>
  form div {
    margin-bottom: 10px;
  }
  input, textarea, select {
    width: 100%;
    padding: 5px;
    box-sizing: border-box;
  }
  button {
    padding: 8px 16px;
  }
  </style>
  

--- _redirects (/Users/chrisyoung/scriptorium-frontend-v2/public/_redirects) ---
/api/*  /.netlify/functions/proxy/:splat  200


--- _headers (/Users/chrisyoung/scriptorium-frontend-v2/public/_headers) ---
/*  
  Access-Control-Allow-Origin: *
  Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
  Access-Control-Allow-Headers: Origin, Content-Type, Accept, Authorization, X-Requested-With


--- proxy.js (/Users/chrisyoung/scriptorium-frontend-v2/netlify/functions/proxy.js) ---
const https = require('https');
const { URL } = require('url');

exports.handler = async (event) => {
  // Handle preflight OPTIONS request directly
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Max-Age': '86400', // Cache preflight response
      },
      body: '',
    };
  }

  // Proxy request to the Render API
  const targetURL = `https://scriptorium-api.onrender.com${event.path.replace('/api', '')}`;

  return new Promise((resolve) => {
    const url = new URL(targetURL);

    const options = {
      hostname: url.hostname,
      path: url.pathname + url.search,
      method: event.httpMethod,
      headers: {
        ...event.headers,
        host: url.hostname,
        'Accept-Encoding': 'identity', // Ensure uncompressed response
      },
      secureProtocol: 'TLSv1_2_method',
      rejectUnauthorized: false, // For debugging, set to true in prod
    };

    const req = https.request(options, (res) => {
      let body = '';

      res.on('data', (chunk) => (body += chunk));
      res.on('end', () => {
        console.log('API Response:', res.statusCode, body); // Log full response for debugging

        resolve({
          statusCode: res.statusCode,
          body,
          headers: {
            ...res.headers,
            'Access-Control-Allow-Origin': '*', // Ensure CORS for frontend
          },
        });
      });
    });

    req.on('error', (err) => {
      console.error('Proxy Error:', err.message);
      resolve({
        statusCode: 500,
        body: JSON.stringify({ message: err.message }),
      });
    });

    if (event.body) {
      req.write(event.body);
    }
    req.end();
  });
};


